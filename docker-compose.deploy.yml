# Used for deployment to a server where we are getting images from Docker Hub
# Overlay ontop of base config with:
#    $ export IMAGE_TEST="v2022-05-20.ABCD1234"
#    $ docker compose -f docker-compose.yml -f docker-compose.deploy.yml up -d
# Set IMAGE_TAG to the image desired, such as:
#     dev
#     staging
#     vYYYY-MM-DD.SHA
#                                                 
# It includes the following containers:           
#  - Flask (extended, running using prod server)  
#  - MySQL (extended)                             
#  - Caddy                                        

services:
    flask:
        image: drbfraser/cradle_platfrom-backend:$IMAGE_TAG
        restart: always
        command: gunicorn -c ./prod/gunicorn.conf.py app:app
        volumes:
            - flask_logs:/var/log
    mysql:
        restart: always
        logging:
            driver: fluentd
            options:
                tag: docker.{{.Name}}.{{.ID}}
                fluentd-async: "true"
                fluentd-address: tcp://localhost:24224
        volumes:
            - mysql_logs:/var/log
            - "./:/etc/mysql/conf.d"
    caddy:
        container_name: cradle_caddy
        image: drbfraser/cradle_platfrom-revproxy_frontend:$IMAGE_TAG
        build:
            context: .
            dockerfile: caddy/Dockerfile
        restart: always
        environment:
            - DOMAIN=${DOMAIN}
            - API_HOSTNAME=cradle_flask
            - CADDY_DEBUG=${CADDY_DEBUG}
        ports:
            - 80:80
            - 443:443
            - "443:443/udp"
        volumes:
            - caddy_data:/data
            - caddy_config:/config
            - caddy_logs:/var/log
    fluentbit:
        container_name: cradle_fluentbit
        image: fluent/fluent-bit:2.0.5
        restart: always
        volumes:
            - caddy_logs:/logs/caddy:ro
            - mysql_logs:/logs/mysql:ro
            - flask_logs:/logs/flask:ro
            - fluentbit_logs_db:/persist
            - fluentbit_logs_output:/output
            - ./fluentbit/config:/fluent-bit/etc
        ports:
            - "24224:24224"
        environment: 
            # Used in staging/prod environment
            AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
        command: ["fluent-bit", "-c", "/fluent-bit/etc/fluent-${ENV:-local}.conf"]

volumes:
    flask_logs:
    caddy_logs:
    caddy_data:
    caddy_config:
    mysql_logs:
    fluentbit_logs_db:
    fluentbit_logs_output:
